
set nospell
let NERDTreeQuitOnOpen = 0

" buf switch{
    nnoremap <C-S-tab> :bprevious<CR>
    nnoremap <C-tab>   :bnext<CR>
" }

"gtags
":map <C-]> :Gtags <CR><CR>
""":map <C-]> :Gtags <C-r>=expand("<cword>")<CR>
":map <C-\> :Gtags -r<CR><CR>
":map <F10> :cclose<CR>
":map <F11> :cp<CR>
":map <F12> :cn<CR>

"ycm {
  let g:ycm_server_python_interpreter='/usr/bin/python'
  let g:ycm_global_ycm_extra_conf='~/.spf13-vim-3/.ycm_extra_conf.py'
  let g:ycm_error_symbol = '>>'
  let g:ycm_warning_symbol = '>*'

  set completeopt=longest,menu	"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
  autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口
  "回车即选中当前项
  inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"	
  "上下左右键的行为 会显示其他信息
  inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
  inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
  inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
  inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

  "youcompleteme  默认tab  s-tab 和自动补全冲突
  "let g:ycm_key_list_select_completion=['<c-n>']
  let g:ycm_key_list_select_completion = ['<A-j>']
  "let g:ycm_key_list_previous_completion=['<c-p>']
  let g:ycm_key_list_previous_completion = ['<A-k>']
  let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
  let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
  let g:ycm_min_num_of_chars_for_completion=1 " 从第2个键入字符就开始罗列匹配项
  let g:ycm_cache_omnifunc=0	" 禁止缓存匹配项,每次都重新生成匹配项
  let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全
  let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
  let g:ycm_complete_in_strings = 1 "在字符串输入中也能补全
  let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全

  " nnoremap <F3> :YcmCompleter GoToDeclaration<CR>
  "nnoremap <F4> :YcmCompleter GoToDefinition<CR>
  "nnoremap <F3> :YcmCompleter GoToDefinitionElseDeclaration<CR>
  nnoremap <A-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
  nmap <F4> :YcmDiags<CR>
  nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>	"force recomile with syntastic
  "nnoremap <leader>lo :lopen<CR>	"open locationlist
  "nnoremap <leader>lc :lclose<CR>	"close locationlist
  inoremap <leader><leader> <C-x><C-o>
  nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> " 跳转到定义处
"}

"fugitiv{
  nnoremap <silent> <leader>ga :Git add -p %<CR>
"}

"airline{
"    let g:airline#extensions#tabline#buffer_idx_mode = 1
"    nmap <leader>1 <Plug>AirlineSelectTab1
"    nmap <leader>2 <Plug>AirlineSelectTab2
"    nmap <leader>3 <Plug>AirlineSelectTab3
"    nmap <leader>4 <Plug>AirlineSelectTab4
"    nmap <leader>5 <Plug>AirlineSelectTab5
"    nmap <leader>6 <Plug>AirlineSelectTab6
"    nmap <leader>7 <Plug>AirlineSelectTab7
"    nmap <leader>8 <Plug>AirlineSelectTab8
"    nmap <leader>9 <Plug>AirlineSelectTab9
"}

" GUI Settings {

    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " Remove the toolbar
        set lines=40                " 40 lines of text instead of 24
        if !exists("g:spf13_no_big_font")
            if LINUX() && has("gui_running")
                set guifont=Andale\ Mono\ Regular\ 13,Menlo\ Regular\ 13,Consolas\ Regular\ 13,Courier\ New\ Regular\ 15
            elseif OSX() && has("gui_running")
                set guifont=Andale\ Mono\ Regular:h12,Menlo\ Regular:h11,Consolas\ Regular:h12,Courier\ New\ Regular:h14
            elseif WINDOWS() && has("gui_running")
                set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10
            endif
        endif
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
        endif
        "set term=builtin_ansi       " Make arrow and other keys work
    endif

" }


" NERDTree {
    let g:nerdtree_tabs_open_on_gui_startup=1
    let g:nerdtree_tabs_open_on_new_tab=1
    let NERDTreeMouseMode=1
" }


